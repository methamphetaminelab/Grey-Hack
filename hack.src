if params.len != 2 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: "+program_path.split("/")[-1]+" [hack/makedump] [ipAddress/libsFolder]</b>")

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path + "/metaxploit.so")
if not metaxploit then exit("Error: Can't find metaxploit library in the /lib path or the current folder")
print("Success: metaxploit loaded!")

makeHack = function(ipAddress)
    pc = get_shell.host_computer
    dumpFile = pc.File(home_dir+"/hackdump.txt")
    if dumpFile == null then 
        exit("Exiting due to missing dump file.")
    else
        dump = dumpFile.get_content
    end if

    hackAction = user_input("Choose action [access/passwordInject/passwords/mails/banks] (password): ")
    action = hackAction.split(" ")
    if action.len == 1 then 
        action = action[0]
        passwordInject = null
    else if action.len == 2 then
        action = action[0]
        passwordInject = action[1]
    else
        exit("Error: Invalid action.")
    end if
    lines = dump.split("\n")
    currentLib = null

    for line in lines
        line = line.trim()
        if line == "" then continue

        parts = line.split(":")
        
        if parts.len == 1 then
            currentLib = parts[0]
        else if currentLib != null then
            currentMemory = parts[0]
            currentExploit = parts[1]
            metaLib = metaxploit.load("/lib/"+currentLib)

            if action == "passwordInject" then
                result = metaLib.overflow(currentMemory, currentExploit, passwordInject)
                if typeof(result) == "number" then 
                    print("---SUCCESS---")
					print("lib: "+currentLib)
					print("memory: "+"["+currentMemory+"]")
					print("exploit: "+currentExploit)
					print("---SUCCESS---")
					exit()
                end if
            end if

            result = metaLib.overflow(currentMemory, currentExploit)

            if typeof(result) == "shell" and action == "access" then
                result.start_terminal
                print("---SUCCESS---")
				print("lib: "+currentLib)
				print("memory: "+"["+currentMemory+"]")
				print("exploit: "+currentExploit)
				print("---SUCCESS---")
				exit()
            else if typeof(result) == "computer" and action == "mails" then
				print("Successfully obtained computer object for target at " + ipAddress)
                mailsOutput = []
				homeDir = result.File("/home")
				if homeDir and homeDir.get_folders then
					userFolders = homeDir.get_folders()
					for userFolder in userFolders
						mailFilePath = userFolder.path + "/Config/Mail.txt"
						mailFile = result.File(mailFilePath)
						if mailFile != null and mailFile.has_permission("r") then
							print("Mail.txt content for user " + userFolder.name + ":\n" + mailFile.get_content())
                                mailsOutput.push(mailFile.get_content())
						end if
					end for
					print("---SUCCESS---")
					print("lib: "+currentLib)
					print("memory: "+"["+currentMemory+"]")
					print("exploit: "+currentExploit)
					print("---SUCCESS---")
					exit(mailsOutput)
				else
					print("Unable to access /home directory or list user folders.")
				end if
            else if typeof(result) == "computer" and action == "banks" then
				print("Successfully obtained computer object for target at " + ipAddress)
				homeDir = result.File("/home")
				if homeDir and homeDir.get_folders then
					userFolders = homeDir.get_folders()
					for userFolder in userFolders
						bankFilePath = userFolder.path + "/Config/Bank.txt"
						bankFile = result.File(bankFilePath)
						if bankFile != null and bankFile.has_permission("r") then
							print("Bank.txt content for user " + userFolder.name + ":\n" + bankFile.get_content())
						end if
					end for
					print("---SUCCESS---")
					print("lib: "+currentLib)
					print("memory: "+"["+currentMemory+"]")
					print("exploit: "+currentExploit)
					print("---SUCCESS---")
					exit()
				else
					print("Unable to access /home directory or list user folders.")
				end if
            else if typeof(result) == "computer" and action == "passwords" then
				print("Successfully obtained computer object for target at " + ipAddress)
				passwordsFile = result.File("/etc/passwd")
                if passwordsFile then
                    passwords = passwordsFile.get_content.split("\n")
                    for password in passwords
                        print(password)
                    end for
                    print("---SUCCESS---")
                    print("lib: "+currentLib)
                    print("memory: "+"["+currentMemory+"]")
                    print("exploit: "+currentExploit)
                    print("---SUCCESS---")
                    exit()
				else
					print("Unable to access /home directory or list user folders.")
				end if
            end if
        else
            print("Error: Found memory address without a library context.")
        end if
    end for
end function

makeDump = function(libsFolder)
    pc = get_shell.host_computer
    folder = pc.File(libsFolder)
    if folder.is_folder then
        libs = folder.get_files
        exploits = ""
        libNum = 0
        for lib in libs
            libNum = libNum + 1
            libName = lib.path.split("/")[-1]
            print("Dumping "+libName+" ["+libNum+"/"+libs.len+"]")
            metaLib = metaxploit.load(lib.path)
            memories = metaxploit.scan(metaLib)
            exploits = exploits+libName+"\n"

            for memory in memories
                vulnerabilities = metaxploit.scan_address(metaLib, memory).split("Unsafe check: ")
                for vulnerability in vulnerabilities
                    exploit = vulnerability[vulnerability.indexOf("<b>") + 3: vulnerability.indexOf("</b>")]
                    if exploit and exploit != vulnerability then 
                        exploits = exploits + memory+":"+currentExploit+"\n"
                    end if
                end for
            end for
        end for
    else
        exit("Error: "+libsFolder+" is not a valid folder path")
    end if

    outputFile = pc.File(home_dir+"/hackdump.txt")
    if outputFile == null then 
        pc.touch(home_dir, "hackdump.txt")
        outputFile = pc.File(home_dir+"/hackdump.txt")
    end if
    
    outputFile.set_content(format_columns(exploits))
end function

action = params[0]
if action == "hack" then 
    ipAddress = params[1]
    makeHack(ipAddress)
else if action == "makedump" then 
    libsFolder = params[1]
    makeDump(libsFolder)
else 
    exit("<b>Usage: "+program_path.split("/")[-1]+" [hack/makedump] [ipAddress/libsFolder]</b>")
end if
